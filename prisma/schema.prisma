// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}


model Event {
    id          String      @id @default(uuid())
    title       String
    description String?
    date        DateTime
    startTime   DateTime
    endTime     DateTime
    color       String?  
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    organizerId String
    organizer   Profile @relation(fields: [organizerId], references: [userId], name: "Organizer")

    participants Participant[]

    @@index([date]) 
}

model Participant {
    id      String     @id  @default(uuid())
    userId  String
    eventId String

    user    Profile @relation(fields: [userId], references: [userId])
    event   Event   @relation(fields: [eventId], references: [id])

    @@unique([userId, eventId]) 
}

model Profile {
    userId String @id

    email    String @unique
    username String @unique

    bio               String?
    profilePictureUrl String?

    eventsOrganized Event[] @relation("Organizer") 
    eventsJoined    Participant[]
    notebooks       Notebook[]

    sentMessages    Inbox[] @relation("SentMessages") 
    receivedMessages Inbox[] @relation("ReceivedMessages") 
}


model Notebook {
    id        String   @id @default(uuid())
    title     String
    color     String? 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ownerId   String
    owner     Profile @relation(fields: [ownerId], references: [userId])

    notes     Note[]
}

model Note {
    id        String   @id @default(uuid())
    title     String
    content   String?  
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    notebookId String?   
    notebook   Notebook? @relation(fields: [notebookId], references: [id])  
}

model Inbox {
    id         String   @id @default(uuid())
    message    String
    createdAt  DateTime @default(now())

    senderEmail   String 
    sender     Profile  @relation("SentMessages", fields: [senderEmail], references: [email])

    receiverEmail String 
    receiver    Profile  @relation("ReceivedMessages", fields: [receiverEmail], references: [email])

    parentId       String?  
    parent         Inbox?   @relation("ReplyThread", fields: [parentId], references: [id])
    replies        Inbox[]  @relation("ReplyThread")
    @@index([receiverEmail]) 
}

